Documentation for TILE Interface
   
lib/
tile1.0.js
This file includes the TILE Interface and all of its necessary components. Developers who wish to write plugins should be able to use any of the following objects, except for TILE_ENGINE, which is used to run plugins.

FloatingDiv
Constructor: new FloatingDiv();
    _rgb2hex(rgb : {String}) - Takes a rgb value (nnn,nnn,nnn) and returns a hexidecimal color value:             #nnnnnn
    init(myID:{String},labels:{Array}) -
Creates the FloatingDiv HTML and attaches it to the element with ID myID. Labels is an array of the metadata to be used in for the autoComplete and to be attached to passed objects
    createDialog(myID:{String}) -
Initializes the jQuery Dialog plugin on the HTML created in init.
    addAutoComplete(elem:{Object}, labels:{Array}) -
adds a jQuery AutoComplete object to the passed elem. Attaches the metadata listed in labels to the autocomplete.

addColorSelector(myID:{String}, o:{String}) -

Attaches ColorSelector plugin to the element with ID myID. Sets o as the base color (o must be in hexidecimal format).

setInputObject(o:{Object},refs:{Array}) -
o represents the TILE object that is passed. It must have an ID for it’s tool, an ID for the object passed (shape, label, etc.), and the type of object (‘labels’,’shapes’,etc.). Makes o the current link to attach metadata to and attaches any metadata already attached in the metadata listing.
sendLabels -
Finds all labels that the user references. Puts parsed data into array and passes it out using the floatDivOutput event call.
deleteLinkHandle(id:{String}) -
Take passed id, find the data it references, then pass this data to the PluginController through deleteMetaLink event call

Events
floatDivOutput
	Passes:
		* link - currently active link as set by setInputObject
		* ref - referenced object to attach to link

deleteMetaLink
	Passes:
		* 
	
colorChanged
	Passes:
		* hexidecimal color value
		* currently active link to apply change to

TILEImage
Constructor: TILEImage({url: {String}})
    getZoomLevel - Returns a copy of the current zoom level {Integer}

    activate - Shows the container DOM

    deactivate - Hide the container DOM

Used as a Parent Class for all Image-based objects (e.g. RaphaelCanvas in image_tagger.js)

Dialog

Constructor: Dialog({loc: {String}, html: {String}})

**These arguments are used for all Dialog Objects
    loc - {String} representing ID of parent DOM - defaults to 'body'

    html - {String} HTML in string format for this Dialog box

This is a Parent Class for all Dialog boxes. The ones below are parents of this class.

HelpBox

Usage: 
new HelpBox({text:{String},iconId:{String}});

text {String} - text to display when the mouse hovers over the icon
iconId {String} - element ID of the icon to attach HelpBox functions to

appear - Called by mouseover. Causes the DOM to show
hide - Called by mouseout. Causes the DOM to hide 

Import Dialog
Constructor: ImportDialog({loc: {String}, html: {String}, auto: {String}})
**Arguments same as Dialog except:
    auto - {String} What to put as default in the "File input" area
   
   
    display({e: {Event}) - Displays the container DOM

    close({e: {Event}}) - Hides the container DOM

    handleMultiForm(e: {Event}) - finds the transcript/image file that the user

                         has input and sends it off in a CustomEvent trigger

                        schemaFileImported

   
LoadTags
Constructor: LoadTags({loc: {String}, html: {String}})
**Arguments same as Dialog
   
    display({e: {Event}) - Displays the container DOM

    close({e: {Event}}) - Hides the container DOM
   
ExportDialog
Constructor: LoadTags({loc: {String}, html: {String}, defaultExport:{String}})
**Arguments same as Dialog
   
   
   
    display({e: {Event}) - Displays the container DOM

    close({e: {Event}}) - Hides the container DOM

    _submitHandle(e: {Event}) - Takes the user-defined filepath in ExportDialog and

                                uses it to output current JSON session as XML
   
TILE_ENGINE
	Constructor: TILE_ENGINE({toolSet:[Array],defaultTool:String});
		toolSet (Array) :: An array of plugin wrappers, each wrapper having the specified properties and methods. These will be 
                   fed into PluginController

		defaultTool (String) :: ID of the default tool to use (Shows up first after TILE is loaded)

		Sets up the TILE toolbar (upper left-hand corner) with the 
		tool selection drop-down, buttons for saving and exporting 
		data


Functions
	

    checkJSON - Called to see if there is a JSON object stored in the PHP session(). Uses PHP/isJSON.php
    getBase - Calls TILECONSTANTS.php file and gets the base URI for this interface. 

    setUp() - Called after getBase(). Creates main TILE interface objects and
            attaches listeners and objects to the existing HTML in index.html

    getSchema({Event} e, {String} file) - Called from Custom Event "schemaFileImport". Passed a string 'file', which

                is then used in an AJAX call to retrieve the JSON data. JSON data should follow TILE specifications and include

                all relevant page data, lines, and optionally stored shapes and other plugin data

    addDialogBoxes - called during setUp(). Takes dialogs.json data and loads this into the interface. Sets up New Image Dialog,

                     Export Dialog, Load Dialog, Save Dialog

    _newPageHandle({Event} e, {String} url) -  Called by Custom Event "newPageLoaded". If a url is passed, it will set a new
                        manifest record for that url and change the transcript lines in the transcript line area.
    _toolDoneHandle({Event} e) - Called by a tool's 'done' Event. Triggers the interface to load the default plugin tool.

    _toolOutputHandle({Event} e, {Object} data) - Called by a tool's 'output' event. Passes JSON object @data to the Transcript object

    _transcriptSelectHandle({Event} e, {Object} data) - called by "TranscriptLineSelected" Event. Passes the @data parameter as JSON data to the

                                                        ActiveBox object.
    setUpTool({String} toolname) - sets a new tool - users must define tool in .js code and proper JSON format

    saveSettingsHandle({Event} e) - Called by "SaveAllSettings" Event. Starts prompt to save the current manifest of data as a JSON object

   

           
TileToolBar
Constructor: TileToolBar({loc:{String}})
Arguments:

    loc {String} - Represents ID of parent DOM
   
   
    setChoices(data: {Object}) - Populates the Tools select menu. Takes JSON object data and sets each

                                option tag to the name of the particular tool.
    setChoice(name: {String}) - When a user selects a tool, jQuery doesn't change the .selected property on

                                that option tag. So this does this manually. Sets option with 'name' as the

                                selected option tag.
Transcript.js
               
Transcript
Constructor: Transcript({loc:{String}})

Arguments:
    loc: {String} what to attach this Object's DOM to (Includes ul list of transcript lines and buttons)
     _drawText : displays the text that is contained in the lineArray variable

     _addLines(data,{optional} url) : takes a JSON-based array (data) and optional parameter url (if this data belongs

         to a new image) and changes the text display

     _shapeDrawnHandle : handler for the VectorDrawer shapeDrawn event. adds the drawn shape to the currently selected line

     _deleteItemHandle : handler for the deleteItem event from ActiveBox

     _updateItemHandle : handler for the shapeChanged event from VectorDrawer

     _lineSelected(index) : takes the argument index and sets the current line to the lineArray index matching index

     _lineDeSelected(index) : the opposite of _lineSelected

     exportLines : returns the lineArray

     bundleData(manifest) : takes argument manifest, which is the manifest for TILE_ENGINE, modifies/updates the TILE_ENGINE

                                 manifest data, then sends modified manifest back.
image_tagger.js
Image Tagger
This is a TILE plugin. It functions with the TILE Interface through the IT object
    provided in the code. The IT object has a series of functions and properties that
    the TILE interface looks for. To create a custom plugin, see the Create Custom Plugin
    Tutorial.
_Itag
Usage:
    new _Itag({loc: {String}, base: {String}, json: {Object}})
   
    loc {String} - represents ID of parent DOM
    base {String} - represents path to images
    json {Object} - JSON object of all image data (pages, lines, shapes)
   
    ingestImages(e: {Event},manifest: {Object}) - receives a JSON string that will be used
                as a map of images and other data
    setHTML(html : {Object}) - Sets up the HTML for this object. Creates RaphaelImage
    createShapeToolBar(e : {Event}) - Called by VDCanvasDONE event. Creates the shape tool bar, after the
                    VectorDrawer has completed construction and calls VDCanvasDONE.
    addNewImage(e : {Event}, path : {String}) - Called by newImageAdded event. Passed 'path', which is a string

                        to a new image to be added to the internal manifest, and later to the output.
    switchHandler(e : {Event}, url : {String}) - Called by switchImage event. Passed a string 'url', which represents
                        a url in the manifest.
    showImageList(e : {Event}) - called by showImageList event. Calls ImageList display() method.
    _restart - Function that restarts the _Itag element after it has been constructed. Used by the IT object when TILE_ENGINE
                    calls the tool to appear after it's construction.
    _closeDown - Function called by IT object to hide the tool.
    bundleData - Function called by IT object to output data.
   
ImageList
Constructor: ImageList({})
    Usage:
        new ImageList({loc: {String}, html : {String}})
       
        loc {String} - ID of the parent DOM
        html {String} - HTML in string format for ImageList (found in imagetagger.json)
   
    show(data : {Object}) - takes JSON Object 'data' and populates the ImageList area with
                image urls taken from data. Once called, sets click event for ImgList button
                to make ImageList hide from DOM.
TILEShapeToolBar
Constructor: TILEShapeToolBar({})
    Usage :
    new TILEShapeToolBar({loc:{String}})
   
    loc: {String} - ID of parent DOM
    setUpColorPicker - Sets up and attaches necessary DOM elements for the jQuery ColorPicker
                    plugin - used to select colors for shapes.
    customWidgetClick(e : {Event}) - Used for opening and closing ColorPicker.
    closeWidgetClick(e : {Event}) -
    onCPSubmit(hsb : {String},hex: {Integer},rgb : {String}) - After user selects a color in ColorPicker,
                this triggers the event NEWSHAPECOLOR and sends the hexidecimal value out.
    activateShapeBar(e : {Event}) - called either remotely ("ActivateShapeBar" event) or locally
                 sets all shape choices to inactive, then checks what the current shape
                 type is and activates that shape choice changes DOM styles
    deactivateShapeBar(e : {Event}) - called either remotely ("DeActivateShapeBar" event) or locally
                 sets all shape choices to inactive
    turnOffShapeBar(e : {Event}) - Sets all of the classes for tools and buttons in toolbar to 'inactive'.
            Called by 'turnOffShapeBar' event.
RaphaelImage
Usage:
    new RaphaelImage({loc: {String}, canvasAreaId: {String}});
   
    loc: {String} - Id for the parent DOM
    canvasAreaId: {String} - Id for the div that will contain the canvas
   
    setNewManifest(manifest : {Object}) - takes JSON object manifest and sets this as the new
                        manifest for RaphaelImage. Manifests must have urls as keys to the array,
                        with each record in the array being a JSON object with
                        {info:{Object},lines:[{Object}...]}
    addUrl(url : {String}) - adds a url to the manifest file. Can be a single url or an array of Urls.
    closeDownCanvas - Called once the image tagger tool is being hidden. Flashes the canvas, then hides it.
    setUpCanvas(url: {String}) - Takes a string 'url' and sets the Raphael Canvas to this. Creates the VectorDrawer
            tool if not already constructed.
    setUpDrawTool - called only if VectorDrawer is not active. Sets up VectorDrawer and its event handlers
    _newColorHandle(e : {Event}, cp : {Integer}) - Called by NEWSHAPECOLOR event. Passed the integer cp, which represents
                the new hexidecimal color value, which is set in VectorDrawer
    closeSVGHandle(e : {Event}, s : {Boolean}) - When something is opened above the SVG canvas, the user can trigger the
                'closeDownVD' and pass 'true' to 'turn off' the canvas. Pass 'false' to turn it back on.
               
    _loadShapesHandle(e : {Event}, json : {Object}) - Called by loadShapes event. Takes the JSON object json and loads the shapes
                         inside it into the VectorDrawer.
    zoomHandle(e : {Event}, n : {Integer}) - Called by the 'zoom' event. Takes integer 'n' and scales the VectorDrawer and the canvas
                area accordingly.
    _restart - Called after the tool has been constructed, hidden, then called again. All hidden DOM elements are re-attached and
            events re-bound
    showImg(e : {Event}, val : {Integer}) - Handles the turnPage event. Val is either 1 or -1. If 1, turns one page forward (if available), if -1,
                turns one page back (if available).
    goToPage(url : {String}) - Passed a url string that it finds in the
                    manifest and goes to that page.
    showCurrentImage(e : {Event}) - Called by the 'imageAdded' event. Takes whatever the current url in manifest is and displays
                    this url.
    changeShapeType(e : {Event}, type : {String}) - Called by 'changeShapeType' event. Passed a 'type' (r,e,p,s) string which it feeds
                    into the VectorDrawer
    bundleData - Returns the RaphaelImage manifest object
   
IT
No Constructor: This is a pre-defined object that is fed into
    the TILE interface to be used as a plugin.
Properties:
   
   
Functions:
autorecognizer_plugin.js
Auto Recognizer
TileOCR
Usage:
    var v = new TileOCR({loc:{String}})
              args.loc {String} - id for where toolbar is located
    args.transcript {Object} - JSON object containing lines for this url    
    _setUp(e {Event},jsonhtml {Object}) -    Setting up the HTML for AutoRecognizer

             Called by 'autoRecJSONReady' trigger

             Replaces both the Transcript and ActiveBox areas to the left and

             replaces canvas area

            
                 jsonhtml : {Object} JSON object containing strings for

                    autorecognizer HTML elements

    swapCanvas - Sets up HTML for the Canvas area
    _restart(transcript {Object}) - Restarts the TILEOCR object - fed transcript JSON
                object for transcript lines
    _loadTranscript - takes the transcript object loaded at construction, then places lines
                into the transcript area.
    ColorChangeHandle(e {Event},thresh {Integer}) - Called by drag and resize event triggers. Calls
                    the CanvasAutoRecognizer functions for converting threshold
    _capture - Stores a region that the regionBox is overlapping, then proceeds to recognize lines
                in that area
    _recognize - Finds lines in the area capture by _capture(), then proceeds to send the final, JSON parsed
                data to outputData
    outputData - Parses the JSON data from _recognize() further and sends it out using outputAutoRecData trigger
   
   
CanvasImage
Usage:

    Usage:
        new CanvasImage({loc:{jQuery Object}})
   
   
    zoomHandle(e {Event}, v {Integer}) - Called by 'zoom' event. Adjust scale by v.

    setUpCanvas(url {String}) - sets the HTML5 Canvas to the given url.

    _closeOut - hides the container DOM

    _restart - shows the container DOM and calls setUpCanvas for current url

    _resetCanvasImage - re-draws the HTML5 Canvas

    _getPerc - outputs percentage offsets of Canvas image area. Returns {Object} {l (left),t (top),w (width),h (height)}

   
   
RegionBox
Usage:

    new RegionBox({loc:{Object}})
    loc: DOM Object to attach RegionBox to
   
   
    _flash - Flashes the DOM container on and off

    _zoomHandle(e {Event}, v {Integer}) - Called by 'zoom' event. Scales Canvas image

                            to 'v'
    _onoff(e {Event})
    _getDims - Returns Bounding Box Object ("left","top","width","height") for regionBox
    _adjustSize(scale {Integer}) - adjusts the Bounding Box to the integer @scale
    _closeOut(e {Event}) - Hides the container DOM. Called by closeOutAutoRec trigger.
   
Shape
Houses a collection of dot coordinates taken from CanvasAutoRecognizer
Usage:

    new Shape({index: {Integer},initialTop: {Integer}, initialLeft: {Integer}, foundOnRow: {Integer}});
   
    index {Integer}: Index for this Shape

    initialTop {Integer} : The top coordinate value from the image

    initialLeft {Integer} : The left coordinate value from the image

    foundOnRow {Integer} : Index for the row found within the image (Relative to CanvasAutoRecognizer's array)
   
             
        add(xy {Object}) - Add an xy value to the object's coords array. xy is an array such as : (x {Integer}, y {Integer})
        compare(shape {Object}, criteria {Object}) - Returns true or false, depending on whether the passed @shape Object

                        has a similar [@criteria] parameter as the shape invoking the function.
   
ColorFilter
Empty parent class for TileColorFilter
TileColorFilter
Usage:

    new TileColorFilter({DOM: {String},red: {String}, green: {String}, blue: {String}, colorBox: {String}});
        DOM {String} : DOM id of container
        red {String} : DOM id of div for red slider
        green {String} : DOM id of div for greeen slider
        blue {String} :  DOM id of div for blue slider
        colorBox {String} : DOM id of div showing color
   
   
    _restart - Resets the sliders back to default values and resets bound events to DOM objects

    setValue(rgb {String}) - Takes a string RGB value (Format: (r,g,b)) then sets sliders and rgbDiv to this value

    changeColorFromSlider(e {Event}, color {String}, val {Integer}) - Set a specific color to a certain value. Triggered

                by slideChange

    _RGB - Returns a {String} representing current (r,g,b) value
   
RegionRule
Object representing an array of values     related to a region of an image to recognize
args:
move: Enum type [stay|next|prev] which directs whether to change the page
top: % from top of image
left: % from left of image
height: % from height of image
width: % from width of image
lineBox
DOM container box that represents a recognized line within an image.    
        Usage:

        new lineBox({width:{Integer},height:{Integer},left:{Integer},top:{Integer}});
   
    select(id {String}) - Selects this linebox - or whichever is matched by ID. Box

            then becomes draggable and resizeable.
    zoomHandle(e {Event}, v {Integer}) - Handles 'zoom' event. Scales the box to the passed

        'v' value.
   
AutoRecognizer
**Parent Class for CanvasAutoRecognizer
Properties:

    data {Array}
    shapes {Array}
   
CanvasAutoRecognizer
Usage:
new CanvasAutoRecognizer({regionID:{String},dotMin:{Integer},dotMax:{Integer}});
    thresholdConversion(threshold {Integer}) - Starts converting the image into black and white. Creates

            dotMatrix object.
    medianThreshold - Takes the dotMatrix object and sorts the dots into black or white
    filterDots - Filters the dots further into black or white dots
    paintFromDotMatrix(matrix {Object}) - takes array of dots (matrix) and uses this as a guide to

                            change each pixel in an image to either black or white
    convertShapesToLines
    cleanLineBreaks
    colorLineBreaks
   
   
AR
Object that is fed into the TILE_ENGINE as a plugin.
    **This object does not have a constructor, it is pre-defined.
   
    Properties:
    constructed: {Boolean} - whether or not start() has already been called; if true, use restart() instead of start()
    name: {String} - name to be used as key in the toolSet array in TILE_ENGINE
    done: {String} - name representing the Event which will trigger TILE_ENGINE to close this object down
    outputData: {String} - name representing the Event which TILE_ENGINE will use to receive output data
    Functions:
    start(id:{String},data:{Object}) - Calls the TileOCR constructor. Uses id as string of the unique id of the parent DOM, and takes
                                     JSON data object for loading transcript lines.
    restart(json {Object}) - Called once tool has already been constructed. Calls TileOCR _restart function and feeds it transcript lines,
                         located in passed 'json' object
    close - Called by TILE_ENGINE to close down this tool - to reactivate, the restart() function is called
    bundleData(j {Object}) - TILE_ENGINE passes object 'j' to be added onto. TileOCR adds on relevant data to this object.
